// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openclarity/apiclarity/plugins/api/client/models"
)

// PostTelemetryReader is a Reader for the PostTelemetry structure.
type PostTelemetryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTelemetryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostTelemetryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTelemetryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostTelemetryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostTelemetryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPostTelemetryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostTelemetryOK creates a PostTelemetryOK with default headers values
func NewPostTelemetryOK() *PostTelemetryOK {
	return &PostTelemetryOK{}
}

/* PostTelemetryOK describes a response with status code 200, with default header values.

Success
*/
type PostTelemetryOK struct {
	Payload interface{}
}

func (o *PostTelemetryOK) Error() string {
	return fmt.Sprintf("[POST /telemetry][%d] postTelemetryOK  %+v", 200, o.Payload)
}
func (o *PostTelemetryOK) GetPayload() interface{} {
	return o.Payload
}

func (o *PostTelemetryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTelemetryBadRequest creates a PostTelemetryBadRequest with default headers values
func NewPostTelemetryBadRequest() *PostTelemetryBadRequest {
	return &PostTelemetryBadRequest{}
}

/* PostTelemetryBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostTelemetryBadRequest struct {
	Payload interface{}
}

func (o *PostTelemetryBadRequest) Error() string {
	return fmt.Sprintf("[POST /telemetry][%d] postTelemetryBadRequest  %+v", 400, o.Payload)
}
func (o *PostTelemetryBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *PostTelemetryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTelemetryUnauthorized creates a PostTelemetryUnauthorized with default headers values
func NewPostTelemetryUnauthorized() *PostTelemetryUnauthorized {
	return &PostTelemetryUnauthorized{}
}

/* PostTelemetryUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostTelemetryUnauthorized struct {
	Payload interface{}
}

func (o *PostTelemetryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /telemetry][%d] postTelemetryUnauthorized  %+v", 401, o.Payload)
}
func (o *PostTelemetryUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *PostTelemetryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTelemetryInternalServerError creates a PostTelemetryInternalServerError with default headers values
func NewPostTelemetryInternalServerError() *PostTelemetryInternalServerError {
	return &PostTelemetryInternalServerError{}
}

/* PostTelemetryInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type PostTelemetryInternalServerError struct {
	Payload interface{}
}

func (o *PostTelemetryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /telemetry][%d] postTelemetryInternalServerError  %+v", 500, o.Payload)
}
func (o *PostTelemetryInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *PostTelemetryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTelemetryDefault creates a PostTelemetryDefault with default headers values
func NewPostTelemetryDefault(code int) *PostTelemetryDefault {
	return &PostTelemetryDefault{
		_statusCode: code,
	}
}

/* PostTelemetryDefault describes a response with status code -1, with default header values.

unknown error
*/
type PostTelemetryDefault struct {
	_statusCode int

	Payload *models.APIResponse
}

// Code gets the status code for the post telemetry default response
func (o *PostTelemetryDefault) Code() int {
	return o._statusCode
}

func (o *PostTelemetryDefault) Error() string {
	return fmt.Sprintf("[POST /telemetry][%d] PostTelemetry default  %+v", o._statusCode, o.Payload)
}
func (o *PostTelemetryDefault) GetPayload() *models.APIResponse {
	return o.Payload
}

func (o *PostTelemetryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
